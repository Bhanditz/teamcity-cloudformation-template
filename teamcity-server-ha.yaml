AWSTemplateFormatVersion: "2010-09-09"

Description:
  This template deploys a high available TeamCity installation including main and readonly server nodes and build agent of the specified version from DockerHub.

Parameters:
    TeamCityVersion:
        Description: TeamCity Version
        Type: String
        AllowedPattern: ".+"
        Default: latest

    ServerContainerCpu:
        Type: Number
        Default: 1024
        Description: How much CPU to give the container running TeamCity server. 1024 is 1 CPU

    ServerContainerMemory:
        Type: Number
        Default: 4096
        Description: How much memory in megabytes to give the container running TeamCity server

    KeyName:
        Description: The existing EC2 KeyPair for SSH access to the EC2 instance running container with TeamCity server and agents
        Type: AWS::EC2::KeyPair::KeyName
        AllowedPattern: ".+"

    ServerInstanceType:
        Description: The instance type for the EC2 instance running container with TeamCity Server
        Type: String
        Default: c5.large
        AllowedValues:
          - t2.medium
          - t2.large
          - t2.xlarge
          - t2.2xlarge
          - m5.xlarge
          - m5.2xlarge
          - m5.4xlarge
          - m5.12xlarge
          - m5.24xlarge
          - m4.large
          - m4.xlarge
          - m4.2xlarge
          - m4.4xlarge
          - m4.10xlarge
          - m4.16xlarge
          - m4.large
          - c5.large
          - c5.xlarge
          - c5.2xlarge
          - c5.4xlarge
          - c5.9xlarge
          - c5.18xlarge
          - c4.large
          - c4.xlarge
          - c4.2xlarge
          - c4.4xlarge
          - c4.8xlarge
          - r4.large
          - r4.xlarge
          - r4.2xlarge
          - r4.4xlarge
          - r4.8xlarge
          - r4.16xlarge

    DBInstanceType:
            Description: The instance type for the RDS instance for TeamCity Database
            Type: String
            Default: db.t2.medium
            AllowedValues:
              - db.t2.medium
              - db.m4.large
              - db.m4.xlarge
              - db.m4.2xlarge
              - db.m4.4xlarge
              - db.m4.10xlarge
              - db.m3.medium
              - db.m3.large
              - db.m3.xlarge
              - db.m3.2xlarge
              - db.r3.large
              - db.r3.xlarge
              - db.r3.2xlarge
              - db.r3.4xlarge
              - db.r3.8xlarge

    DBPassword:
        Description: Provide the password for the TeamCity RDS Database (min 8, maximum 41 characters)
        Type: String
        AllowedPattern: ".+"
        MinLength: 8
        NoEcho: true

    AgentInstanceType:
        Description: The instance type for the EC2 instance running container with TeamCity Build Agent
        Type: String
        Default: t2.medium
        AllowedValues:
          - t2.small
          - t2.medium
          - t2.large
          - t2.xlarge
          - t2.2xlarge
          - m5.xlarge
          - m5.2xlarge
          - m5.4xlarge
          - m5.12xlarge
          - m5.24xlarge
          - m4.large
          - m4.xlarge
          - m4.2xlarge
          - m4.4xlarge
          - m4.10xlarge
          - m4.16xlarge
          - m4.large
          - c5.large
          - c5.xlarge
          - c5.2xlarge
          - c5.4xlarge
          - c5.9xlarge
          - c5.18xlarge
          - c4.large
          - c4.xlarge
          - c4.2xlarge
          - c4.4xlarge
          - c4.8xlarge
          - r4.large
          - r4.xlarge
          - r4.2xlarge
          - r4.4xlarge
          - r4.8xlarge
          - r4.16xlarge

    AgentNumber:
      Type: Number
      Default: 1
      Description: Number of build agents to start. Set '0' to start TeamCity server without build agents connected.

    AgentContainerCpu:
      Type: Number
      Default: 1024
      Description: How much CPU to give the container running TeamCity build agent. 1024 is 1 CPU

    AgentContainerMemory:
      Type: Number
      Default: 2048
      Description: How much memory in megabytes to give the container running TeamCity build agent

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
          - Label:
              default: ""
            Parameters:
              - TeamCityVersion
              - KeyName
          - Label:
              default: "TeamCity Server"
            Parameters:
              - ServerInstanceType
              - ServerContainerCpu
              - ServerContainerMemory
          - Label:
              default: "Database"
            Parameters:
              - DBInstanceType
              - DBPassword
          - Label:
              default: "Build Agents"
            Parameters:
              - AgentNumber
              - AgentInstanceType
              - AgentContainerCpu
              - AgentContainerMemory
        ParameterLabels:
          ServerInstanceType:
            default: "EC2 Instance Type"
          AgentInstanceType:
            default: "EC2 Instance Type"
          KeyName:
            default: "EC2 KeyPair"
          TeamCityVersion:
            default: "TeamCity Version"
          DBInstanceType:
            default: "RDS Database Instance Type"
          DBPassword:
            default: "TeamCity Database Password"
          ServerContainerMemory:
            default: "Container Memory"
          AgentContainerMemory:
            default: "Container Memory"
          ServerContainerCpu:
            default: "Container CPU"
          AgentContainerCpu:
            default: "Container CPU"
          AgentNumber:
            default: "Agents Number"

Mappings:

  AWSRegionToAMI:
        eu-central-1:
            AMI: ami-9fc39c74
        ap-northeast-1:
            AMI: ami-a99d8ad5
        ap-northeast-2:
            AMI: ami-9d56f9f3
        ca-central-1:
            AMI: ami-897ff9ed
        ap-south-1:
            AMI: ami-72edc81d
        sa-east-1:
            AMI: ami-4a7e2826
        ap-southeast-2:
            AMI: ami-efda148d
        ap-southeast-1:
            AMI: ami-846144f8
        us-east-1:
            AMI: ami-aff65ad2
        us-east-2:
            AMI: ami-64300001
        us-west-2:
            AMI: ami-40ddb938
        us-west-1:
            AMI: ami-69677709
        eu-west-1:
            AMI: ami-2d386654
        eu-west-2:
            AMI: ami-2218f945
        eu-west-3:
            AMI: ami-250eb858

Resources:

  VPC:
      Type: AWS::EC2::VPC
      Properties:
          CidrBlock: 10.0.0.0/16
          EnableDnsHostnames: true
          Tags:
              - Key: Name
                Value: !Sub TeamCity-${AWS::StackName}

  InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
          Tags:
              - Key: Name
                Value: !Sub TeamCity-${AWS::StackName}

  InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
          InternetGatewayId: !Ref InternetGateway
          VpcId: !Ref VPC

  PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 0, !GetAZs "" ]
          CidrBlock: 10.0.0.0/24
          MapPublicIpOnLaunch: true
          Tags:
              - Key: Name
                Value: !Sub TeamCity ${AWS::StackName} Public Subnet (AZ1)

  PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 1, !GetAZs "" ]
          CidrBlock: 10.0.1.0/24
          MapPublicIpOnLaunch: true
          Tags:
              - Key: Name
                Value: !Sub TeamCity ${AWS::StackName} Public Subnet (AZ2)

  PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 0, !GetAZs "" ]
          CidrBlock: 10.0.2.0/24
          MapPublicIpOnLaunch: false
          Tags:
              - Key: Name
                Value: !Sub TeamCity ${AWS::StackName} Private Subnet (AZ1)

  PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 1, !GetAZs "" ]
          CidrBlock: 10.0.3.0/24
          MapPublicIpOnLaunch: false
          Tags:
              - Key: Name
                Value: !Sub TeamCity ${AWS::StackName} Private Subnet (AZ2)

  PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId: !Ref VPC
          Tags:
              - Key: Name
                Value: !Sub TeamCity ${AWS::StackName} Public Routes

  DefaultPublicRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties:
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId: !Ref VPC
          Tags:
              - Key: Name
                Value: !Sub TeamCity ${AWS::StackName} Private Routes (AZ1)

  DefaultPrivateRoute1:
      Type: AWS::EC2::Route
      Properties:
          RouteTableId: !Ref PrivateRouteTable1
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway

  PrivateSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PrivateRouteTable1
          SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId: !Ref VPC
          Tags:
              - Key: Name
                Value: !Sub TeamCity ${AWS::StackName} Private Routes (AZ2)

  DefaultPrivateRoute2:
      Type: AWS::EC2::Route
      Properties:
          RouteTableId: !Ref PrivateRouteTable2
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway

  PrivateSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PrivateRouteTable2
          SubnetId: !Ref PrivateSubnet2

  # A public facing load balancer, this is used for accepting traffic from the public
  # internet and directing it to public facing microservices
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
          # Allow access to ALB from anywhere on the internet
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref PublicLoadBalancerSG

  MainNodeTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 6
        HealthCheckPath: /login.html
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 2
        Matcher:
          HttpCode: '200'
        Port: 8111
        Protocol: HTTP
        TargetType: instance
        VpcId: !Ref 'VPC'

  ReadonlyNodeTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /login.html
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Port: 8111
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref 'VPC'

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref MainNodeTargetGroup
          Type: 'forward'
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: HTTP

  MainNodeLoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref MainNodeTargetGroup
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values:
          - '*'
      ListenerArn: !Ref PublicLoadBalancerListener
      Priority: 1

  ReadonlyNodeLoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref ReadonlyNodeTargetGroup
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values:
          - '*'
      ListenerArn: !Ref PublicLoadBalancerListener
      Priority: 2

  ECSCluster:
        Type: AWS::ECS::Cluster
        Properties:
          ClusterName: !Ref AWS::StackName

  ECSAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        DependsOn:
          - EfsMountTarget1
          - EfsMountTarget2
        Properties:
          VPCZoneIdentifier:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          LaunchConfigurationName: !Ref "ECSNodeLaunchConfiguration"
          MinSize: 2
          MaxSize: 2
          DesiredCapacity: 2

  ECSNodeLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref 'AWS::Region' , "AMI" ]
      KeyName: !Ref 'KeyName'
      InstanceType: !Ref ServerInstanceType
      SecurityGroups:
        - !Ref ECSNodeSecurityGroup
      IamInstanceProfile: !Ref ECSNodeInstanceProfile
      UserData:
        Fn::Base64: !Sub |
           #!/bin/bash
           echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
           sudo yum install -y amazon-efs-utils
           sudo mkdir /mnt/efs
           sudo mount -t efs ${FileSystem}:/ /mnt/efs
           service docker stop
           service docker start

  ECSNodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref ECSNodeInstanceRole

  ECSNodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"

  MainNodeTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - RDSDB
    Properties:
      Volumes:
        - Name: data
          Host:
            SourcePath: /mnt/efs
        - Name: logs
          Host:
            SourcePath: /mnt/data/logs/teamcity
        - Name: temp
          Host:
            SourcePath: /mnt/data/temp/teamcity
      ContainerDefinitions:
        - Name: 'teamcity-server'
          Image: !Join [':', ['jetbrains/teamcity-server', !Ref 'TeamCityVersion']]
          Cpu: "ServerContainerCpu"
          Memory: "ServerContainerMemory"
          Essential: true
          Command:
            - "/bin/bash"
            - "-c"
            - !Sub
              - "if [ ! -f /data/teamcity_server/datadir/lib/jdbc ]; then mkdir -p /data/teamcity_server/datadir/lib/jdbc; curl -o /data/teamcity_server/datadir/lib/jdbc/mysql-connector-java-bin.jar http://central.maven.org/maven2/mysql/mysql-connector-java/5.1.43/mysql-connector-java-5.1.43.jar; fi; if [ ! -f /data/teamcity_server/datadir/config/database.properties ]; then mkdir -p /data/teamcity_server/datadir/config; echo connectionProperties.user=teamcity > /data/teamcity_server/datadir/config/database.properties; echo connectionProperties.password=${RDSPassword} >> /data/teamcity_server/datadir/config/database.properties; echo connectionUrl=jdbc\\:mysql\\://${RDSAddress}/teamcitydb >> /data/teamcity_server/datadir/config/database.properties; fi; exec /run-services.sh;"
              - {
                  RDSAddress: !GetAtt [RDSDB, Endpoint.Address],
                  RDSPassword: !Ref 'DBPassword',
                  TeamCityVersion: !Ref 'TeamCityVersion'
                }
          Environment:
            - Name: TEAMCITY_SERVER_MEM_OPTS
              Value: -XX:MaxPermSize=270m -XX:ReservedCodeCacheSize=350m
          MountPoints:
            - ContainerPath: /data/teamcity_server/datadir
              SourceVolume: data
            - ContainerPath: /opt/teamcity/logs
              SourceVolume: logs
            - ContainerPath: /opt/teamcity/temp
              SourceVolume: temp
          PortMappings:
            - ContainerPort: 8111
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: 'aws/ecs/teamcity-server'

  ReadonlyNodeTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - RDSDB
    Properties:
      Volumes:
        - Name: data_main
          Host:
            SourcePath: /mnt/efs
        - Name: data_ro
          Host:
            SourcePath: /mnt/data/teamcity_ro
        - Name: logs
          Host:
            SourcePath: /mnt/data/logs/teamcity
        - Name: temp
          Host:
            SourcePath: /mnt/data/temp/teamcity
      ContainerDefinitions:
        - Name: 'teamcity-server'
          Image: !Join [':', ['jetbrains/teamcity-server', !Ref 'TeamCityVersion']]
          Cpu: "ServerContainerCpu"
          Memory: "ServerContainerMemory"
          Essential: true
          Command:
            - "/bin/bash"
            - "-c"
            - !Sub
              - "if [ ! -f /data/teamcity_server_ro/datadir/lib/jdbc ]; then mkdir -p /data/teamcity_server_ro/datadir/lib/jdbc; curl -o /data/teamcity_server_ro/datadir/lib/jdbc/mysql-connector-java-bin.jar http://central.maven.org/maven2/mysql/mysql-connector-java/5.1.43/mysql-connector-java-5.1.43.jar; fi; if [ ! -f /data/teamcity_server_ro/datadir/config/database.properties ]; then mkdir -p /data/teamcity_server_ro/datadir/config; echo connectionProperties.user=teamcity > /data/teamcity_server_ro/datadir/config/database.properties; echo connectionProperties.password=${RDSPassword} >> /data/teamcity_server_ro/datadir/config/database.properties; echo connectionUrl=jdbc\\:mysql\\://${RDSAddress}/teamcitydb >> /data/teamcity_server_ro/datadir/config/database.properties; fi; exec /run-services.sh;"
              - {
                  RDSAddress: !GetAtt [RDSDB, Endpoint.Address],
                  RDSPassword: !Ref 'DBPassword',
                  TeamCityVersion: !Ref 'TeamCityVersion'
                }
          Environment:
            - Name: TEAMCITY_SERVER_OPTS
              Value: -Dteamcity.server.nodeSpecificDataPath=/data/teamcity_server_ro/datadir -Dteamcity.server.role=read-only-server
            - Name: TEAMCITY_SERVER_MEM_OPTS
              Value: -XX:MaxPermSize=270m -XX:ReservedCodeCacheSize=350m
          MountPoints:
            - ContainerPath: /data/teamcity_server/datadir
              SourceVolume: data_main
            - ContainerPath: /data/teamcity_server_ro/datadir
              SourceVolume: data_ro
            - ContainerPath: /opt/teamcity/logs
              SourceVolume: logs
            - ContainerPath: /opt/teamcity/temp
              SourceVolume: temp
          PortMappings:
            - ContainerPort: 8111
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: 'aws/ecs/teamcity-server'

  MainNodeService:
    Type: AWS::ECS::Service
    DependsOn:
      - ECSAutoScalingGroup
      - PublicLoadBalancer
    Properties:
      ServiceName: !Join ['_', [!Ref 'AWS::StackName', 'TeamCityServer', 'MainNode']]
      Cluster:
        Ref: ECSCluster
      LaunchType: EC2
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 0
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 600
      TaskDefinition:
        Ref: MainNodeTaskDefinition
      PlacementStrategies:
        - Type: "spread"
          Field: "attribute:ecs.availability-zone"
      LoadBalancers:
        - ContainerName: 'teamcity-server'
          ContainerPort: 8111
          TargetGroupArn:
            Ref: MainNodeTargetGroup

  ReadonlyNodeService:
    Type: AWS::ECS::Service
    DependsOn:
      - ECSAutoScalingGroup
      - PublicLoadBalancer
      - MainNodeService
    Properties:
      ServiceName: !Join ['_', [!Ref 'AWS::StackName', 'TeamCityServer', 'ReadonlyNode']]
      Cluster:
        Ref: ECSCluster
      LaunchType: EC2
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 0
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 600
      TaskDefinition:
        Ref: ReadonlyNodeTaskDefinition
      PlacementStrategies:
        - Type: "spread"
          Field: "attribute:ecs.availability-zone"
      LoadBalancers:
        - ContainerName: 'teamcity-server'
          ContainerPort: 8111
          TargetGroupArn:
            Ref: ReadonlyNodeTargetGroup

  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      FileSystemTags:
      - Key: Name
        Value:
          Ref: AWS::StackName

  EfsMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: FileSystem
      SubnetId:
        Ref: PublicSubnet1
      SecurityGroups:
      - Ref: "EFSMountingTargetsSecurityGroup"

  EfsMountTarget2:
     Type: AWS::EFS::MountTarget
     Properties:
       FileSystemId:
         Ref: FileSystem
       SubnetId:
         Ref: PublicSubnet2
       SecurityGroups:
       - Ref: "EFSMountingTargetsSecurityGroup"

  EFSMountingTargetsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the EFS
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 0.0.0.0/0

  ECSNodeSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: ECS node SG
        VpcId: !Ref 'VPC'
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '8111'
            ToPort: '8111'
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: '1024'
            ToPort: '65535'
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
          - IpProtocol: -1
            FromPort: '0'
            ToPort: '0'
            CidrIp: 0.0.0.0/0

  # RDS

  RDSDB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '5'
      DBInstanceClass: !Ref 'DBInstanceType'
      DBInstanceIdentifier: !Sub TeamCity-${AWS::StackName}
      DBName: 'teamcitydb'
      DBSubnetGroupName: !Ref 'RDSSubnetGroup'
      VPCSecurityGroups:
      - Ref: RDSSecurityGroup
      Engine: MySQL
      EngineVersion: 5.5.54
      MasterUsername: teamcity
      MasterUserPassword: !Ref 'DBPassword'
      DBParameterGroupName: !Ref 'RDSParamGroup'
      PubliclyAccessible: false
    DeletionPolicy: Snapshot

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: !Sub TeamCity ${AWS::StackName} Database
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  RDSParamGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Family: MySQL5.5
      Description: !Sub TeamCity ${AWS::StackName} DB
      Parameters:
        long_query_time: "5"
        slow_query_log: "1"
        innodb_flush_log_at_trx_commit: "2"
        character_set_server: "utf8"
        collation_server: "utf8_bin"
        max_allowed_packet: "16777216"

  RDSSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: !Sub TeamCity ${AWS::StackName} DB
      SubnetIds:
        - !Ref 'PublicSubnet1'
        - !Ref 'PublicSubnet2'

  #  Logging

  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1


