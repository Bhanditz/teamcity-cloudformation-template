AWSTemplateFormatVersion: "2010-09-09"

Description:
  This template deploys a high available TeamCity installation including main and readonly server nodes and build agent of the specified version from DockerHub.

Parameters:
    TeamCityVersion:
        Description: TeamCity Version
        Type: String
        AllowedPattern: ".+"
        Default: latest

    ContainerCpu:
        Type: Number
        Default: 1024
        Description: How much CPU to give the container running TeamCity server. 1024 is 1 CPU

    ContainerMemory:
        Type: Number
        Default: 4096
        Description: How much memory in megabytes to give the container running TeamCity server

    KeyName:
        Description: The existing EC2 KeyPair for SSH access to the EC2 instance running container with TeamCity Server
        Type: AWS::EC2::KeyPair::KeyName
        AllowedPattern: ".+"

    ServerInstanceType:
        Description: The instance type for the EC2 instance running container with TeamCity Server
        Type: String
        Default: t2.medium
        AllowedValues:
          - t2.medium
          - t2.large
          - t2.xlarge
          - t2.2xlarge
          - m5.xlarge
          - m5.2xlarge
          - m5.4xlarge
          - m5.12xlarge
          - m5.24xlarge
          - m4.large
          - m4.xlarge
          - m4.2xlarge
          - m4.4xlarge
          - m4.10xlarge
          - m4.16xlarge
          - m4.large
          - c5.large
          - c5.xlarge
          - c5.2xlarge
          - c5.4xlarge
          - c5.9xlarge
          - c5.18xlarge
          - c4.large
          - c4.xlarge
          - c4.2xlarge
          - c4.4xlarge
          - c4.8xlarge
          - c3.large
          - c3.xlarge
          - c3.2xlarge
          - c3.4xlarge
          - c3.8xlarge
          - r4.large
          - r4.xlarge
          - r4.2xlarge
          - r4.4xlarge
          - r4.8xlarge
          - r4.16xlarge
          - r3.large
          - r3.xlarge
          - r3.2xlarge
          - r3.4xlarge
          - r3.8xlarge

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
          -
            Label:
              default: "TeamCity Server"
            Parameters:
              - ServerInstanceType
              - KeyName
              - TeamCityVersion
        ParameterLabels:
          ServerInstanceType:
            default: "EC2 Instance Type"
          KeyName:
            default: "EC2 KeyPair"
          TeamCityVersion:
            default: "TeamCity Version"

Mappings:

  AWSRegionToAMI:
        eu-central-1:
            AMI: ami-9fc39c74
        ap-northeast-1:
            AMI: ami-a99d8ad5
        ap-northeast-2:
            AMI: ami-9d56f9f3
        ca-central-1:
            AMI: ami-897ff9ed
        ap-south-1:
            AMI: ami-72edc81d
        sa-east-1:
            AMI: ami-4a7e2826
        ap-southeast-2:
            AMI: ami-efda148d
        ap-southeast-1:
            AMI: ami-846144f8
        us-east-1:
            AMI: ami-aff65ad2
        us-east-2:
            AMI: ami-64300001
        us-west-2:
            AMI: ami-40ddb938
        us-west-1:
            AMI: ami-69677709
        eu-west-1:
            AMI: ami-2d386654
        eu-west-2:
            AMI: ami-2218f945
        eu-west-3:
            AMI: ami-250eb858

Resources:

  VPC:
      Type: AWS::EC2::VPC
      Properties:
          CidrBlock: 10.0.0.0/16
          Tags:
              - Key: Name
                Value: !Sub TeamCity-${AWS::StackName}

  InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
          Tags:
              - Key: Name
                Value: !Sub TeamCity-${AWS::StackName}

  InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
          InternetGatewayId: !Ref InternetGateway
          VpcId: !Ref VPC

  PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 0, !GetAZs "" ]
          CidrBlock: 10.0.0.0/24
          MapPublicIpOnLaunch: true
          Tags:
              - Key: Name
                Value: !Sub TeamCity ${AWS::StackName} Public Subnet (AZ1)

  PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 1, !GetAZs "" ]
          CidrBlock: 10.0.1.0/24
          MapPublicIpOnLaunch: true
          Tags:
              - Key: Name
                Value: !Sub TeamCity ${AWS::StackName} Public Subnet (AZ2)

  PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 0, !GetAZs "" ]
          CidrBlock: 10.0.2.0/24
          MapPublicIpOnLaunch: false
          Tags:
              - Key: Name
                Value: !Sub TeamCity ${AWS::StackName} Private Subnet (AZ1)

  PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 1, !GetAZs "" ]
          CidrBlock: 10.0.3.0/24
          MapPublicIpOnLaunch: false
          Tags:
              - Key: Name
                Value: !Sub TeamCity ${AWS::StackName} Private Subnet (AZ2)

  PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId: !Ref VPC
          Tags:
              - Key: Name
                Value: !Sub TeamCity ${AWS::StackName} Public Routes

  DefaultPublicRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties:
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId: !Ref VPC
          Tags:
              - Key: Name
                Value: !Sub TeamCity ${AWS::StackName} Private Routes (AZ1)

  DefaultPrivateRoute1:
      Type: AWS::EC2::Route
      Properties:
          RouteTableId: !Ref PrivateRouteTable1
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway

  PrivateSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PrivateRouteTable1
          SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId: !Ref VPC
          Tags:
              - Key: Name
                Value: !Sub TeamCity ${AWS::StackName} Private Routes (AZ2)

  DefaultPrivateRoute2:
      Type: AWS::EC2::Route
      Properties:
          RouteTableId: !Ref PrivateRouteTable2
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway

  PrivateSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PrivateRouteTable2
          SubnetId: !Ref PrivateSubnet2

  # A public facing load balancer, this is used for accepting traffic from the public
  # internet and directing it to public facing microservices
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
          # Allow access to ALB from anywhere on the internet
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref PublicLoadBalancerSG

  TargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 6
        HealthCheckPath: /mnt
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 2
        Matcher:
          HttpCode: '200'
        Port: 8111
        Protocol: HTTP
        TargetType: instance
        VpcId: !Ref 'VPC'

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Port: 8111
      Protocol: HTTP

  LoadBalancerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
          - TargetGroupArn: !Ref 'TargetGroup'
            Type: 'forward'
        Conditions:
          - Field: path-pattern
            Values:
            - '*'
        ListenerArn: !Ref 'PublicLoadBalancerListener'
        Priority: 1

  ECSCluster:
        Type: AWS::ECS::Cluster
        Properties:
          ClusterName: !Ref AWS::StackName

  ECSAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        DependsOn:
          - MountTarget1
          - MountTarget2
        Properties:
          VPCZoneIdentifier:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          LaunchConfigurationName: !Ref "ECSNodeLaunchConfiguration"
          MinSize: 1
          MaxSize: 1
          DesiredCapacity: 1
        UpdatePolicy:
          AutoScalingRollingUpdate:
            MinInstancesInService: 1
            MaxBatchSize: 1
            PauseTime: "PT15M"
            WaitOnResourceSignals: true

  ECSNodeLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref 'AWS::Region' , "AMI" ]
      KeyName: !Ref 'KeyName'
      InstanceType: !Ref ServerInstanceType
      SecurityGroups:
        - !Ref ECSNodeSecurityGroup
      IamInstanceProfile: !Ref ECSNodeInstanceProfile
      UserData:
        Fn::Base64: !Sub |
           #!/bin/bash
           echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config

           EC2_AVAIL_ZONE=`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone`
           EC2_REGION=${AWS::Region}
           EFS_FILE_SYSTEM_ID=${FileSystem}
           DIR_SRC=$EC2_AVAIL_ZONE.$EFS_FILE_SYSTEM_ID.efs.$EC2_REGION.amazonaws.com
           DIR_TGT=/mnt/efs

           touch /home/ec2-user/echo.res
           echo $EFS_FILE_SYSTEM_ID >> /home/ec2-user/echo.res
           echo $EC2_AVAIL_ZONE >> /home/ec2-user/echo.res
           echo $EC2_REGION >> /home/ec2-user/echo.res
           echo $DIR_SRC >> /home/ec2-user/echo.res
           echo $DIR_TGT >> /home/ec2-user/echo.res

           mkdir /mnt/efs
           mount -t nfs4 $DIR_SRC:/ $DIR_TGT >> /home/ec2-user/echo.res
           echo -e \"$DIR_SRC:/ \t\t $DIR_TGT \t\t nfs \t\t defaults \t\t 0 \t\t 0\" | tee -a /etc/fstab

           docker ps
           service docker stop
           service docker start

  ECSNodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref ECSNodeInstanceRole

  ECSNodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"

  TaskDefinition:
      Type: AWS::ECS::TaskDefinition
      Properties:
        Volumes:
          - Name: data
            Host:
              SourcePath: /mnt/efs
          - Name: logs
            Host:
              SourcePath: /mnt/data/logs/teamcity
          - Name: temp
            Host:
              SourcePath: /mnt/data/temp/teamcity
        ContainerDefinitions:
          - Name: 'teamcity-server'
            Image: !Join [':', ['jetbrains/teamcity-server', !Ref 'TeamCityVersion']]
            Cpu: !Ref 'ContainerCpu'
            Memory: !Ref 'ContainerMemory'
            Essential: true
            MountPoints:
              - ContainerPath: /data/teamcity_server/datadir
                SourceVolume: data
              - ContainerPath: /opt/teamcity/logs
                SourceVolume: logs
              - ContainerPath: /opt/teamcity/temp
                SourceVolume: temp
            PortMappings:
              - ContainerPort: 8111
            LogConfiguration:
              LogDriver: 'awslogs'
              Options:
                awslogs-group: !Ref ECSLogGroup
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: 'aws/ecs/teamcity-server'

  Service:
      Type: AWS::ECS::Service
      DependsOn:
        - ECSAutoScalingGroup
        - PublicLoadBalancer
      Properties:
        ServiceName: !Join ['_', [!Ref 'AWS::StackName', 'TeamCityServer']]
        Cluster: !Ref 'ECSCluster'
        LaunchType: EC2
        DeploymentConfiguration:
          MaximumPercent: 200
          MinimumHealthyPercent: 0
        DesiredCount: 1
        HealthCheckGracePeriodSeconds: 300
        TaskDefinition: !Ref 'TaskDefinition'
        PlacementStrategies:
          - Type: "spread"
            Field: "attribute:ecs.availability-zone"
        LoadBalancers:
          - ContainerName: 'teamcity-server'
            ContainerPort: 8111
            TargetGroupArn: !Ref 'TargetGroup'

  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      FileSystemTags:
      - Key: Name
        Value:
          Ref: AWS::StackName

  MountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: FileSystem
      SubnetId:
        Ref: PublicSubnet1
      SecurityGroups:
      - Ref: "EFSMountingTargetsSecurityGroup"

  MountTarget2:
     Type: AWS::EFS::MountTarget
     Properties:
       FileSystemId:
         Ref: FileSystem
       SubnetId:
         Ref: PublicSubnet2
       SecurityGroups:
       - Ref: "EFSMountingTargetsSecurityGroup"

  EFSMountingTargetsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the EFS
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 0.0.0.0/0

  ECSNodeSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: ECS node SG
        VpcId: !Ref 'VPC'
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '8111'
            ToPort: '8111'
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: '1024'
            ToPort: '65535'
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
          - IpProtocol: -1
            FromPort: '0'
            ToPort: '0'
            CidrIp: 0.0.0.0/0

  #  Logging

  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1


